<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage {{className}} - Quizzie</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* All your existing styles remain the same... */
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Layout Structure */
        .layout {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 2px 0 4px rgba(0, 0, 0, 0.05);
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .class-info {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
        }

        .class-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .class-subject {
            font-size: 0.9rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }

        .class-quick-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }

        .quick-stat {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem;
            border-radius: 6px;
        }

        .quick-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            display: block;
        }

        .quick-stat-label {
            font-size: 0.7rem;
            opacity: 0.8;
        }

        /* Navigation Menu */
        .nav-menu {
            padding: 1rem 0;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1.5rem;
            color: #64748b;
            text-decoration: none;
            transition: all 0.2s ease;
            border-right: 3px solid transparent;
            cursor: pointer;
        }

        .nav-link:hover {
            background: #f8fafc;
            color: #3b82f6;
        }

        .nav-link.active {
            background: #eff6ff;
            color: #3b82f6;
            border-right-color: #3b82f6;
            font-weight: 600;
        }

        .nav-icon {
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        /* Breadcrumb */
        .breadcrumb {
            padding: 1rem 1.5rem;
            background: white;
            border-bottom: 1px solid #e2e8f0;
            color: #64748b;
            font-size: 0.9rem;
        }

        .breadcrumb a {
            color: #3b82f6;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            background: #f8fafc;
            width: calc(100vw - 280px);
            max-width: calc(100vw - 280px);
            box-sizing: border-box;
            overflow-x: hidden;
        }

        .content-wrapper {
            padding: 2rem;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.75rem;
            font-weight: bold;
            color: #1e293b;
        }

        .section-subtitle {
            color: #64748b;
            margin-top: 0.25rem;
            font-size: 0.9rem;
        }

        /* 🆕 NEW: Student Management Layout - Grid for side-by-side sections */
        .student-management-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        /* 🆕 NEW: Compact Join Code System */
        .join-code-container {
            background: linear-gradient(135deg, #1072b9, #165aa3);
            color: white;
            border-radius: 12px;
            padding: 1.25rem;
            position: relative;
            overflow: hidden;
            height: fit-content;
        }

        .join-code-container::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(20px, -20px);
        }

        .join-code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .join-code-title {
            font-size: 1rem;
            font-weight: bold;
            margin: 0;
        }

        .generate-code-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            font-size: 0.85rem;
        }

        .generate-code-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .active-code-display {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 8px;
            padding: 0.8rem;
            text-align: center;
        }

        .code-value {
            font-size: 1.5rem;
            font-weight: bold;
            letter-spacing: 0.1em;
            margin-bottom: 0.4rem;
            font-family: 'Courier New', monospace;
        }

        .code-info {
            font-size: 0.8rem;
            opacity: 0.9;
            margin-bottom: 0.4rem;
        }

        .countdown-timer {
            font-size: 0.75rem;
            font-weight: bold;
            color: #fef3c7;
        }

        .no-active-code {
            text-align: center;
            padding: 1.5rem;
            opacity: 0.8;
        }

        /* 🆕 NEW: Compact Add Student Form */
        .add-student-card {
            background: white;
            border-radius: 12px;
            padding: 1.25rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            height: fit-content;
        }

        .add-student-title {
            font-size: 1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* 🆕 NEW: Pending Requests Button */
        .pending-requests-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .pending-requests-btn {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            position: relative;
        }

        .pending-requests-btn:hover {
            background: linear-gradient(135deg, #2563eb, #7c3aed);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
        }

        .pending-requests-btn:active {
            transform: translateY(0);
        }

        /* 🆕 NEW: Notification Badge */
        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: bold;
            border: 2px solid white;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }

        /* 🆕 NEW: Pending Requests Modal */
        .pending-requests-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .pending-requests-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .pending-requests-modal-content {
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow: hidden;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .pending-requests-modal.active .pending-requests-modal-content {
            transform: translateY(0);
        }

        .pending-requests-modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
        }

        .pending-requests-modal-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin: 0;
        }

        .pending-requests-modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: white;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background-color 0.2s ease;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .pending-requests-modal-close:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .pending-requests-modal-body {
            padding: 1.5rem;
            max-height: 60vh;
            overflow-y: auto;
        }

        /* 🆕 NEW: Updated Request Item Styles for Modal */
        .modal-request-item {
            background: #f8fafc;
            border-radius: 8px;
            padding: 1.25rem;
            border: 1px solid #e2e8f0;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .modal-request-item:hover {
            border-color: #3b82f6;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
        }

        .modal-request-item:last-child {
            margin-bottom: 0;
        }

        .modal-request-info {
            margin-bottom: 1rem;
        }

        .modal-request-student-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.5rem;
            font-size: 1.05rem;
        }

        .modal-request-meta {
            font-size: 0.85rem;
            color: #64748b;
            line-height: 1.4;
        }

        .modal-request-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        .modal-approve-btn {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.6rem 1.25rem;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .modal-approve-btn:hover {
            background: #059669;
            transform: translateY(-1px);
        }

        .modal-reject-btn {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.6rem 1.25rem;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .modal-reject-btn:hover {
            background: #dc2626;
            transform: translateY(-1px);
        }

        .no-pending-requests {
            text-align: center;
            padding: 3rem 2rem;
            color: #64748b;
        }

        .no-pending-requests h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        /* Cards and Containers */
        .card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        /* 🔧 FIX: Perfect screen fit for recent activity card - COMPLETE SOLUTION */
        .card.recent_submit {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            width: 100%;
            max-width: 100%;
            overflow: hidden;
            box-sizing: border-box;
            position: relative;
        }

        /* 🔥 NEW: Enhanced Recent Activity Styles - Perfect Responsive Fit */
        .recent-activity-container {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            overflow-y: hidden;
            padding: 0.5rem 0;
            min-height: 120px;
            width: 100%;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e1 #f1f5f9;
        }

        .recent-activity-container::-webkit-scrollbar {
            height: 8px;
        }

        .recent-activity-container::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 4px;
        }

        .recent-activity-container::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 4px;
        }

        .recent-activity-container::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        .activity-item {
            flex: 0 0 180px;
            height: 100px;
            padding: 1rem;
            border-radius: 12px;
            border: 2px solid #e2e8f0;
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: all 0.3s ease;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            color: #1f2937;
            min-width: 180px;
        }

        .activity-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-color: #cbd5e1;
        }

        .activity-item-header {
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            margin-bottom: auto;
        }

        .activity-student-name {
            font-weight: bold;
            font-size: 0.9rem;
            line-height: 1.2;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 150px;
            color: #1f2937;
        }

        .activity-item-footer {
            display: flex;
            justify-content: space-between;
            align-items: flex-end;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .activity-score {
            color: #1f2937;
            font-weight: bold;
        }

        .activity-time {
            color: #64748b;
            opacity: 0.9;
        }

        /* Empty state for recent activity */
        .recent-activity-empty {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 120px;
            color: #64748b;
            font-style: italic;
            width: 100%;
            background: #f8fafc;
            border-radius: 8px;
            border: 2px dashed #e2e8f0;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        /* Grid Layouts */
        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
        }

        .grid-4 {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
        }

        /* Stats Cards */
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Create Quiz Button Styles */
        .create-quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .create-quiz-btn {
            background: linear-gradient(135deg, #10b981, #16a34a);
            color: white;
            border: none;
            padding: 0.875rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1rem;
        }

        .create-quiz-btn:hover {
            background: linear-gradient(135deg, #059669, #15803d);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
        }

        .create-quiz-btn:active {
            transform: translateY(0);
        }

        /* Forms */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s ease;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        /* 🆕 NEW: Exam Mode Toggle Styles */
        .exam-mode-toggle-container {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            border-radius: 12px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            position: relative;
            overflow: hidden;
        }

        .exam-mode-toggle-container::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(20px, -20px);
        }

        .exam-mode-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
            margin-bottom: 0.75rem;
        }

        .exam-mode-title {
            font-size: 1rem;
            font-weight: bold;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .exam-mode-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .exam-mode-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .exam-mode-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.3);
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 34px;
        }

        .exam-mode-slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .exam-mode-slider {
            background-color: rgba(255, 255, 255, 0.6);
        }

        input:checked + .exam-mode-slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        .exam-mode-info {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .exam-session-controls {
            display: none;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 1rem;
        }

        .exam-session-controls.active {
            display: block;
        }

        .session-duration-selector {
            margin-bottom: 1rem;
        }

        .session-duration-selector label {
            color: white;
            font-weight: 600;
            margin-bottom: 0.5rem;
            display: block;
            font-size: 0.9rem;
        }

        /* 🆕 NEW: Active Exam Session Display */
        .active-exam-session {
            background: linear-gradient(135deg, #10b981, #16a34a);
            color: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            position: relative;
            overflow: hidden;
        }

        .active-exam-session::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(25px, -25px);
        }

        .session-status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .session-status-title {
            font-size: 1.1rem;
            font-weight: bold;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .end-session-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            font-size: 0.85rem;
        }

        .end-session-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .session-info-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
        }

        .session-info-item {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 0.75rem 0.5rem;
            border-radius: 8px;
        }

        .session-info-value {
            font-size: 1.25rem;
            font-weight: bold;
            display: block;
            margin-bottom: 0.25rem;
        }

        .session-info-label {
            font-size: 0.75rem;
            opacity: 0.9;
        }

        .session-countdown {
            font-size: 1.5rem;
            font-weight: bold;
            text-align: center;
            margin: 1rem 0;
            padding: 0.75rem;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            letter-spacing: 0.05em;
        }

        /* Compact Selector Styles */
        .compact-selector {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
            padding: 0.75rem;
            background: #f8fafc;
            border-radius: 6px;
            border: 1px solid #e2e8f0;
        }

        .compact-btn {
            background: #3b82f6;
            color: white;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 1px 3px rgba(59, 130, 246, 0.2);
        }

        .compact-btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
            box-shadow: 0 2px 6px rgba(59, 130, 246, 0.3);
        }

        .compact-btn:active {
            transform: translateY(0);
        }

        .compact-btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .compact-display {
            background: white;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            border: 2px solid #3b82f6;
            text-align: center;
            min-width: 90px;
        }

        .compact-value {
            font-size: 1.25rem;
            font-weight: bold;
            color: #3b82f6;
            margin-right: 0.25rem;
        }

        .compact-unit {
            font-size: 0.8rem;
            color: #64748b;
            font-weight: 500;
        }

        .compact-presets {
            display: flex;
            gap: 0.375rem;
            flex-wrap: wrap;
            margin-bottom: 0.5rem;
        }

        .compact-preset-btn {
            background: #f1f5f9;
            color: #64748b;
            border: 1px solid #e2e8f0;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .compact-preset-btn:hover {
            background: #e2e8f0;
            color: #475569;
        }

        .compact-preset-btn.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .compact-help {
            font-size: 0.75rem;
            color: #64748b;
            margin: 0;
            font-style: italic;
        }

        /* Buttons */
        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, #0d63a1, #0b4f99);
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #1072b9, #165aa3);
        }

        .btn-warning {
            background: #f59e0b;
        }

        .btn-warning:hover {
            background: #d97706;
        }

        .btn-danger {
            background: #ef4444;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-secondary {
            background: #64748b;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-info {
            background: #8b5cf6;
        }

        .btn-info:hover {
            background: #7c3aed;
        }

        /* 🆕 NEW: Start Exam Session Button */
        .start-session-btn {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            width: 100%;
            justify-content: center;
        }

        .start-session-btn:hover {
            background: linear-gradient(135deg, #ff5252, #e04848);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
        }

        .start-session-btn:active {
            transform: translateY(0);
        }

        .start-session-btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .refresh-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .refresh-btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        /* Tables */
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .table th {
            background: #f8fafc;
            font-weight: 600;
            color: #1e293b;
        }

        .table tr:hover {
            background: #f8fafc;
        }

        /* Charts */
        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .chart-wrapper {
            position: relative;
            height: 300px;
        }

        /* Rankings Layout Styles */
        .rankings-section {
            margin-top: 2rem;
        }

        .rankings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .ranking-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .ranking-card-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .ranking-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 3px solid #e5e7eb;
            margin-bottom: 0.75rem;
        }

        .ranking-item.top-3 {
            border-left-color: #10b981;
            background: #f0fdf4;
        }

        .ranking-item:last-child {
            margin-bottom: 0;
        }

        .rank-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: bold;
            min-width: 30px;
            text-align: center;
            margin-right: 0.75rem;
        }

        .rank-1 { background: #ffd700; color: #1e293b; }
        .rank-2 { background: #c0c0c0; color: #1e293b; }
        .rank-3 { background: #cd7f32; color: white; }
        .rank-other { background: #e2e8f0; color: #64748b; }

        .student-rank-info {
            flex: 1;
        }

        .student-rank-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .student-rank-meta {
            font-size: 0.8rem;
            color: #64748b;
        }

        .student-rank-score {
            text-align: right;
        }

        .student-score-main {
            font-weight: bold;
            color: #10b981;
            font-size: 0.95rem;
        }

        .student-score-sub {
            font-size: 0.75rem;
            color: #64748b;
        }

        /* Quiz Header Styles */
        .quiz-header-info {
            background: #eff6ff;
            border: 1px solid #bfdbfe;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
            color: #1e40af;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #16a34a;
            border: 1px solid #86efac;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #dc2626;
            border: 1px solid #fca5a5;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #d97706;
            border: 1px solid #fcd34d;
        }

        /* Quiz Item Styles */
        .quiz-item {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #e2e8f0;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .quiz-item:hover {
            border-color: #3b82f6;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .quiz-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .quiz-meta {
            color: #64748b;
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .quiz-stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .quiz-stat {
            font-size: 0.8rem;
            color: #64748b;
        }

        .quiz-actions {
            display: flex;
            gap: 0.5rem;
        }

        /* 🆕 NEW: Exam Session Status Badge */
        .exam-session-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: bold;
            margin-left: 0.5rem;
            animation: pulse-glow 2s infinite;
        }

        .exam-session-badge.active {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            box-shadow: 0 0 10px rgba(255, 107, 107, 0.5);
        }

        .exam-session-badge.inactive {
            background: #e2e8f0;
            color: #64748b;
        }

        @keyframes pulse-glow {
            0% {
                box-shadow: 0 0 5px rgba(255, 107, 107, 0.5);
            }
            50% {
                box-shadow: 0 0 15px rgba(255, 107, 107, 0.8);
            }
            100% {
                box-shadow: 0 0 5px rgba(255, 107, 107, 0.5);
            }
        }

        /* Student Item Styles */
        .student-item {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            margin-bottom: 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .student-info {
            flex: 1;
        }

        .student-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .student-meta {
            font-size: 0.8rem;
            color: #64748b;
        }

        .student-stats {
            display: flex;
            gap: 1rem;
            margin-right: 1rem;
        }

        .student-stat {
            text-align: center;
        }

        .student-stat-value {
            font-weight: bold;
            color: #3b82f6;
            font-size: 0.9rem;
        }

        .student-actions {
            display: flex;
            gap: 0.5rem;
        }

        .view-performance-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.2s ease;
        }

        .view-performance-btn:hover {
            background: #7c3aed;
        }

        /* Modal Overlay Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow: hidden;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .modal-overlay.active .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #10b981, #16a34a);
            color: white;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: white;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background-color 0.2s ease;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .modal-body {
            padding: 1.5rem;
            max-height: 70vh;
            overflow-y: auto;
        }

        /* Quiz Viewer Modal Styles */
        .quiz-question-item {
            background: #f8fafc;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid #e2e8f0;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .question-number {
            background: #3b82f6;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .explanation-toggle {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .explanation-toggle:hover {
            background: #7c3aed;
        }

        .question-text {
            font-size: 1.05rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .options-list {
            display: grid;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .option-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            background: white;
            border-radius: 6px;
            border: 1px solid #e2e8f0;
            transition: all 0.2s ease;
        }

        .option-item.correct {
            border-color: #10b981;
            background: #f0fdf4;
        }

        .option-letter {
            background: #64748b;
            color: white;
            border-radius: 50%;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.875rem;
            flex-shrink: 0;
        }

        .option-item.correct .option-letter {
            background: #10b981;
        }

        .option-text {
            flex: 1;
            color: #334155;
        }

        .correct-indicator {
            color: #10b981;
            font-weight: bold;
            font-size: 0.875rem;
        }

        .explanations-section {
            background: white;
            border-radius: 6px;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            display: none;
        }

        .explanations-section.active {
            display: block;
        }

        .explanation-item {
            margin-bottom: 0.75rem;
            padding: 0.75rem;
            background: #f8fafc;
            border-radius: 4px;
            border-left: 3px solid #e2e8f0;
        }

        .explanation-item.correct {
            border-left-color: #10b981;
            background: #f0fdf4;
        }

        .explanation-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.25rem;
        }

        .explanation-text {
            color: #64748b;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        /* 🆕 NEW: Loading Overlay Styles */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(8px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .loading-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .loading-content {
            background: transparent;
            border-radius: 16px;
            padding: 3rem 2.5rem;
            text-align: center;
            max-width: 400px;
            width: 90%;
            transform: translateY(-20px) scale(0.9);
            transition: all 0.3s ease;
        }

        .loading-overlay.active .loading-content {
            transform: translateY(0) scale(1);
        }

        .loading-animation {
            width: 120px;
            height: 120px;
            margin: 0 auto 1.5rem;
            border-radius: 12px;
            overflow: hidden;
            background: transparent;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .loading-animation img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 12px;
        }

        .loading-text {
            font-size: 1.25rem;
            font-weight: bold;
            color: #d7dbe2;
            margin: 0;
            line-height: 1.4;
            transition: opacity 0.3s ease;
        }

        .loading-text.fade-out {
            opacity: 0;
        }

        .loading-text.fade-in {
            opacity: 1;
        }

        /* Progress indicator */
        .loading-progress {
            width: 100%;
            height: 4px;
            background: #e2e8f0;
            border-radius: 2px;
            margin: 1.5rem 0 0.5rem 0;
            overflow: hidden;
        }

        .loading-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6, #10b981);
            border-radius: 2px;
            width: 0%;
            transition: width 0.3s ease;
        }

        /* Mobile Responsiveness */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .mobile-menu-btn {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 200;
                background: #3b82f6;
                color: white;
                border: none;
                padding: 0.5rem;
                border-radius: 8px;
                cursor: pointer;
            }

            .analytics-grid,
            .grid-2,
            .grid-3,
            .grid-4,
            .rankings-grid,
            .student-management-grid {
                grid-template-columns: 1fr;
            }

            .modal-content,
            .pending-requests-modal-content {
                width: 95%;
                margin: 1rem;
            }
        }

        @media (max-width: 768px) {
            .content-wrapper {
                padding: 1rem;
            }

            .class-quick-stats {
                grid-template-columns: 1fr;
            }

            .quiz-stats {
                flex-direction: column;
                gap: 0.25rem;
            }

            .student-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }

            .student-stats {
                margin-right: 0;
            }

            .student-actions {
                width: 100%;
                flex-direction: column;
                gap: 0.5rem;
            }

            .view-performance-btn {
                width: 100%;
                text-align: center;
            }

            .chart-wrapper {
                height: 250px;
            }

            /* Compact selector responsive design */
            .compact-selector {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .compact-presets {
                justify-content: center;
            }
            
            .compact-preset-btn {
                flex: 1;
                min-width: 40px;
            }

            .modal-body,
            .pending-requests-modal-body {
                padding: 1rem;
            }

            .quiz-question-item {
                padding: 1rem;
            }

            .create-quiz-header {
                flex-direction: column;
                align-items: stretch;
                gap: 1rem;
            }

            .create-quiz-btn {
                text-align: center;
                justify-content: center;
            }

            /* Responsive modal request items */
            .modal-request-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .modal-approve-btn,
            .modal-reject-btn {
                width: 100%;
            }

            .pending-requests-header {
                flex-direction: column;
                align-items: stretch;
                gap: 1rem;
            }

            .pending-requests-btn {
                justify-content: center;
            }

            /* Mobile responsive for recent activity - Perfect fit */
            .card.recent_submit {
                padding: 1rem;
                margin-bottom: 1rem;
                width: 100%;
                max-width: 100%;
            }

            .rankings-section {
                margin-top: 1.5rem;
                width: 100%;
                max-width: 100%;
            }

            .recent-activity-container {
                gap: 0.5rem;
                padding: 0.25rem 0;
                width: 100%;
            }

            .activity-item {
                flex: 0 0 130px;
                min-width: 130px;
                height: 85px;
                padding: 0.625rem;
            }

            .activity-student-name {
                font-size: 0.8rem;
                max-width: 100px;
            }

            .activity-item-footer {
                font-size: 0.7rem;
            }

            .loading-content {
                padding: 1.5rem 1rem;
            }

            .loading-animation {
                width: 80px;
                height: 80px;
            }

            .loading-text {
                font-size: 1rem;
            }

            /* 🆕 NEW: Mobile responsive for exam mode */
            .exam-mode-toggle-container {
                padding: 1rem;
            }

            .exam-mode-header {
                flex-direction: column;
                align-items: stretch;
                gap: 0.5rem;
            }

            .session-info-grid {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }

            .session-countdown {
                font-size: 1.25rem;
                margin: 0.75rem 0;
                padding: 0.5rem;
            }

            .exam-session-controls {
                padding: 0.75rem;
            }
        }

        html, body {
            width: 100%;
            max-width: 100%;
            overflow-x: hidden;
        }

        /* 🆕 NEW: Simple Exam Session Button Styles */
.start-exam-session-btn {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
}

.start-exam-session-btn:hover {
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
}

.start-exam-session-btn:disabled {
    background: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Active Exam Timer Styles */
.exam-timer-display {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    margin: 1rem 0;
    font-family: 'Courier New', monospace;
    font-size: 1.2rem;
    font-weight: bold;
    letter-spacing: 0.05em;
    box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
}

.exam-timer-display .timer-label {
    font-size: 0.8rem;
    opacity: 0.9;
    display: block;
    margin-bottom: 0.25rem;
}


    </style>
</head>
<body>
    <!-- Mobile Menu Button -->
    <button class="mobile-menu-btn" onclick="toggleSidebar()" style="display: none;">☰</button>

    <!-- 🆕 NEW: Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
        <div class="loading-content">
            <div class="loading-animation">
                <img src="/Animation-1751710786188.gif" alt="Loading Animation" id="loadingGif" onload="console.log('✅ Loading GIF loaded successfully')" onerror="console.error('❌ Failed to load GIF')">
            </div>
            <h3 class="loading-text fade-in" id="loadingText">Preparing your quiz...</h3>
            <div class="loading-progress">
                <div class="loading-progress-bar" id="loadingProgressBar"></div>
            </div>
        </div>
    </div>

    <div class="layout">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <!-- Class Info Header -->
            <div class="class-info">
                <h1 class="class-title" id="classTitle">{{className}}</h1>
                <p class="class-subject" id="classSubject">{{classSubject}}</p>
                <div class="class-quick-stats">
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickStudents">-</span>
                        <span class="quick-stat-label">Students</span>
                    </div>
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickLectures">-</span>
                        <span class="quick-stat-label">Lectures</span>
                    </div>
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickQuizzes">-</span>
                        <span class="quick-stat-label">Quizzes</span>
                    </div>
                </div>
            </div>

            <!-- Navigation Menu -->
            <nav class="nav-menu">
                <a class="nav-link active" onclick="showSection('analytics')">
                    <span class="nav-icon">📈</span>
                    <span>Analytics</span>
                </a>
                <a class="nav-link" onclick="showSection('quizzes')">
                    <span class="nav-icon">🎯</span>
                    <span>Quizzes</span>
                </a>
                <a class="nav-link" onclick="showSection('students')">
                    <span class="nav-icon">👥</span>
                    <span>Students</span>
                </a>
                <a class="nav-link" onclick="showSection('settings')">
                    <span class="nav-icon">⚙️</span>
                    <span>Settings</span>
                </a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Breadcrumb -->
            <div class="breadcrumb">
                <a href="/homeTeacher">Dashboard</a> > <a href="/homeTeacher">My Classes</a> > <span id="breadcrumbClass">{{className}}</span>
            </div>

            <div class="content-wrapper">
                <!-- Analytics Section (Default) -->
                <section id="analyticsSection" class="content-section active">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">📈 Class Analytics & Overview</h2>
                            <p class="section-subtitle">Comprehensive performance insights and class statistics</p>
                        </div>
                        <button onclick="loadAnalytics()" class="refresh-btn">
                            🔄 Refresh Data
                        </button>
                    </div>

                    <!-- Stats Grid -->
                    <div class="grid-4" id="analyticsStats" style="margin-bottom: 3rem;">
                        <div class="stat-card blue">
                            <div class="stat-value" id="totalStudents">-</div>
                            <div class="stat-label">Total Students</div>
                        </div>
                        <div class="stat-card green">
                            <div class="stat-value" id="classAverage">-%</div>
                            <div class="stat-label">Class Average</div>
                        </div>
                        <div class="stat-card purple">
                            <div class="stat-value" id="totalQuizzes">-</div>
                            <div class="stat-label">Total Quizzes</div>
                        </div>
                        <div class="stat-card orange">
                            <div class="stat-value" id="totalAttempts">-</div>
                            <div class="stat-label">Total Quiz Attempts</div>
                        </div>
                    </div>

                    <!-- Charts Grid -->
                    <div class="grid-2" style="margin-bottom: 2rem;">
                        <!-- Performance Chart -->
                        <div class="chart-container">
                            <h3 class="card-title">📊 Class Performance Trend</h3>
                            <div class="chart-wrapper">
                                <canvas id="performanceChart"></canvas>
                            </div>
                        </div>

                        <!-- Quiz Distribution Chart -->
                        <div class="chart-container">
                            <h3 class="card-title">🎯 Quiz Score Distribution</h3>
                            <div class="chart-wrapper">
                                <canvas id="distributionChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Rankings Section Below Charts -->
                    <div class="rankings-section">
                        <div class="rankings-grid">
                            <!-- Class Rankings -->
                            <div class="ranking-card">
                                <h3 class="ranking-card-title">
                                    🏆 Class Rankings
                                    <span style="font-size: 0.8rem; font-weight: normal; color: #64748b;">(Points Based)</span>
                                </h3>
                                <div id="classRankingsContainer">
                                    <div class="loading">Loading class rankings...</div>
                                </div>
                            </div>

                            <!-- Last Quiz Rankings -->
                            <div class="ranking-card">
                                <h3 class="ranking-card-title">
                                    🎯 Latest Quiz Rankings
                                </h3>
                                <div id="lastQuizRankingsContainer">
                                    <div class="loading">Loading latest quiz rankings...</div>
                                </div>
                            </div>
                        </div>

                        <!-- Recent Quiz Activity Below Rankings -->
                        <div class="card recent_submit">
                            <h3 class="card-title">🏃‍♂️ Recently Submitted</h3>
                            <div id="recentActivityContainer" class="recent-activity-container">
                                <div class="loading">Loading recent activity...</div>
                            </div>
                        </div>
                    </div>

                    <!-- Detailed Analytics Tables -->
                    <div class="card">
                        <h3 class="card-title">📊 Detailed Class Statistics</h3>
                        <div id="detailedAnalyticsContainer">
                            <div class="loading">Loading detailed analytics...</div>
                        </div>
                    </div>
                </section>

                <!-- Quizzes Section -->
                <section id="quizzesSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">🎯 Quiz Management</h2>
                            <p class="section-subtitle">Create and manage quizzes for this class</p>
                        </div>
                    </div>

                    <!-- Create Quiz Button -->
                    <div class="create-quiz-header">
                        <button class="create-quiz-btn" onclick="openCreateQuizModal()">
                            ➕ Create Quiz
                        </button>
                    </div>

                    <!-- Existing Quizzes -->
                    <div class="card">
                        <h3 class="card-title">📝 Class Quizzes</h3>
                        <div id="quizzesContainer">
                            <div class="loading">Loading quizzes...</div>
                        </div>
                    </div>
                </section>

                <!-- 🆕 UPDATED: Students Section with improved layout -->
                <section id="studentsSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">👥 Student Management</h2>
                            <p class="section-subtitle">Manage students enrolled in this class</p>
                        </div>
                        <!-- 🆕 NEW: Pending Requests Button in Header -->
                        <div class="pending-requests-header">
                            <button class="pending-requests-btn" onclick="openPendingRequestsModal()" id="pendingRequestsBtn">
                                📬 Pending Requests
                                <span class="notification-badge" id="pendingRequestsBadge" style="display: none;">0</span>
                            </button>
                        </div>
                    </div>

                    <!-- 🆕 NEW: Side-by-side layout for Join Code and Add Student -->
                    <div class="student-management-grid">
                        <!-- Join Code System - Left Column -->
                        <div class="join-code-container">
                            <div class="join-code-header">
                                <h3 class="join-code-title">🔐 Class Join Code System</h3>
                                <button class="generate-code-btn" onclick="generateJoinCode()">
                                    🔄 Generate Code
                                </button>
                            </div>
                            <div id="joinCodeDisplay">
                                <div class="no-active-code">
                                    <p>🚀 Generate a join code to let students request to join!</p>
                                    <p style="font-size: 0.8rem; margin-top: 0.5rem;">Valid for 10 minutes, up to 50 requests.</p>
                                </div>
                            </div>
                        </div>

                        <!-- Add Student Manually - Right Column -->
                        <div class="add-student-card">
                            <h3 class="add-student-title">
                                ➕ Add Student Manually
                            </h3>
                            <form id="addStudentForm">
                                <div class="form-group">
                                    <label class="form-label">Student Enrollment Number</label>
                                    <input type="text" id="enrollmentNumber" class="form-input" placeholder="Enter enrollment number" required>
                                </div>
                                <button type="submit" class="btn btn-success" style="width: 100%;">👥 Add Student</button>
                            </form>
                        </div>
                    </div>

                    <!-- Student List -->
                    <div class="card">
                        <h3 class="card-title">📋 Enrolled Students</h3>
                        <div id="studentsContainer">
                            <div class="loading">Loading students...</div>
                        </div>
                    </div>
                </section>

                <!-- Settings Section -->
                <section id="settingsSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">⚙️ Class Settings</h2>
                            <p class="section-subtitle">Update class information and preferences</p>
                        </div>
                    </div>

                    <!-- Edit Class Form -->
                    <div class="card">
                        <h3 class="card-title">✏️ Edit Class Information</h3>
                        <form id="editClassForm">
                            <div class="form-group">
                                <label class="form-label">Class Name</label>
                                <input type="text" id="editClassName" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Subject</label>
                                <input type="text" id="editClassSubject" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Description</label>
                                <textarea id="editClassDescription" class="form-textarea" rows="3"></textarea>
                            </div>
                            <button type="submit" class="btn btn-warning">💾 Update Class</button>
                        </form>
                    </div>

                    <!-- Danger Zone -->
                    <div class="card" style="border-color: #ef4444;">
                        <h3 class="card-title" style="color: #ef4444;">⚠️ Danger Zone</h3>
                        <p style="color: #64748b; margin-bottom: 1rem;">These actions cannot be undone. Please proceed with caution.</p>
                        <button class="btn btn-danger" onclick="archiveClass()">🗄️ Archive Class</button>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <!-- 🔄 UPDATED: Create Quiz Modal with Simplified Exam Session -->
    <div id="createQuizModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">🎯 Create New Quiz</h3>
                <button class="modal-close" onclick="closeCreateQuizModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="createQuizForm">
                    <div class="form-group">
                        <label class="form-label">Upload Lecture File</label>
                        <input type="file" id="lectureFile" class="form-input" accept=".pdf,.ppt,.pptx,.doc,.docx" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Lecture Title</label>
                        <input type="text" id="lectureTitle" class="form-input" placeholder="e.g., Chapter 1: Introduction to Physics" required>
                    </div>
                    
                    <!-- 🆕 NEW: Exam Session Toggle - Added above Quiz Duration -->
                    <div class="exam-mode-toggle-container" style="margin-bottom: 1rem;">
                        <div class="exam-mode-header">
                            <h3 class="exam-mode-title">
                                🚨 Auto-Start Exam Session
                            </h3>
                            <label class="exam-mode-switch">
                                <input type="checkbox" id="autoStartExamToggle">
                                <span class="exam-mode-slider"></span>
                            </label>
                        </div>
                        <div class="exam-mode-info">
                            When enabled, an exam session will start automatically after quiz creation with the selected duration.
                        </div>
                    </div>
                    
                    <!-- Quiz Duration Selector -->
                    <div class="form-group">
                        <label class="form-label">Quiz Duration</label>
                        <div class="compact-selector">
                            <button type="button" class="compact-btn" onclick="adjustDuration(-1)">−</button>
                            <div class="compact-display">
                                <span class="compact-value" id="durationValue">15</span>
                                <span class="compact-unit">min</span>
                            </div>
                            <button type="button" class="compact-btn" onclick="adjustDuration(1)">+</button>
                        </div>
                        <div class="compact-presets">
                            <button type="button" class="compact-preset-btn" onclick="setDuration(5)">5m</button>
                            <button type="button" class="compact-preset-btn" onclick="setDuration(10)">10m</button>
                            <button type="button" class="compact-preset-btn active" onclick="setDuration(15)">15m</button>
                            <button type="button" class="compact-preset-btn" onclick="setDuration(20)">20m</button>
                            <button type="button" class="compact-preset-btn" onclick="setDuration(30)">30m</button>
                            <button type="button" class="compact-preset-btn" onclick="setDuration(45)">45m</button>
                            <button type="button" class="compact-preset-btn" onclick="setDuration(60)">1h</button>
                        </div>
                    </div>

                    <!-- Number of Questions Selector -->
                    <div class="form-group">
                        <label class="form-label">Number of Questions</label>
                        <div class="compact-selector">
                            <button type="button" class="compact-btn" onclick="adjustQuestions(-1)">−</button>
                            <div class="compact-display">
                                <span class="compact-value" id="questionsValue">10</span>
                                <span class="compact-unit">questions</span>
                            </div>
                            <button type="button" class="compact-btn" onclick="adjustQuestions(1)">+</button>
                        </div>
                        <div class="compact-presets">
                            <button type="button" class="compact-preset-btn" onclick="setQuestions(5)">5</button>
                            <button type="button" class="compact-preset-btn active" onclick="setQuestions(10)">10</button>
                            <button type="button" class="compact-preset-btn" onclick="setQuestions(15)">15</button>
                            <button type="button" class="compact-preset-btn" onclick="setQuestions(20)">20</button>
                            <button type="button" class="compact-preset-btn" onclick="setQuestions(25)">25</button>
                            <button type="button" class="compact-preset-btn" onclick="setQuestions(30)">30</button>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-success" style="width: 100%; margin-top: 1rem;">📤 Upload & Generate Quiz</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Quiz Viewer Modal -->
    <div id="quizViewerModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalQuizTitle">Quiz Questions</h3>
                <button class="modal-close" onclick="closeQuizViewer()">&times;</button>
            </div>
            <div class="modal-body" id="modalQuizContent">
                <div class="loading">Loading quiz questions...</div>
            </div>
        </div>
    </div>

    <!-- 🆕 NEW: Pending Requests Modal -->
    <div id="pendingRequestsModal" class="pending-requests-modal">
        <div class="pending-requests-modal-content">
            <div class="pending-requests-modal-header">
                <h3 class="pending-requests-modal-title">📬 Pending Join Requests</h3>
                <button class="pending-requests-modal-close" onclick="closePendingRequestsModal()">&times;</button>
            </div>
            <div class="pending-requests-modal-body" id="pendingRequestsModalBody">
                <div class="loading">Loading pending requests...</div>
            </div>
        </div>
    </div>

    <script>



        // Global variables
        const classId = '{{classId}}';
        const className = '{{className}}';
        const classSubject = '{{classSubject}}';
        let classData = {};
        let analyticsData = {};
        let performanceChart = null;
        let distributionChart = null;
        let joinCodeTimer = null;
        let pendingRequestsCount = 0; // 🆕 NEW: Track pending requests count

        // Quiz configuration variables
        let currentDuration = 15; // Default 15 minutes
        let currentQuestions = 10; // Default 10 questions

        // 🆕 NEW: Exam session variables
        let currentSessionDuration = 60; // Default 60 minutes for exam session
        let isExamModeEnabled = false;
        let activeExamSessions = new Map(); // Track active sessions
        let examSessionTimers = new Map(); // Track session timers

        console.log('🚀 Class Management initializing for:', {
            classId: classId,
            className: className,
            classSubject: classSubject
        });

        // 🆕 NEW: Exam Mode Toggle Functions
        function toggleExamMode() {
            const toggle = document.getElementById('examModeToggle');
            const controls = document.getElementById('examSessionControls');
            
            isExamModeEnabled = toggle.checked;
            
            if (isExamModeEnabled) {
                controls.classList.add('active');
                console.log('🔥 Exam mode enabled');
            } else {
                controls.classList.remove('active');
                console.log('📝 Regular quiz mode');
            }
        }

        // 🆕 NEW: Session Duration Functions
        function adjustSessionDuration(change) {
            const newDuration = Math.max(15, Math.min(300, currentSessionDuration + change));
            setSessionDuration(newDuration);
        }

        function setSessionDuration(minutes) {
            currentSessionDuration = Math.max(15, Math.min(300, minutes));
            
            // Update display
            document.getElementById('sessionDurationValue').textContent = currentSessionDuration;
            
            // Update preset buttons
            document.querySelectorAll('#examSessionControls .compact-presets .compact-preset-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Highlight active preset if it matches
            const matchingPreset = document.querySelector(`#examSessionControls .compact-preset-btn[onclick="setSessionDuration(${currentSessionDuration})"]`);
            if (matchingPreset) {
                matchingPreset.classList.add('active');
            }
            
            console.log('⏰ Session duration set to:', currentSessionDuration, 'minutes');
        }

        // 🆕 NEW: Start Exam Session Function
        async function startExamSession(quizId) {
            try {
                console.log('🔥 Starting exam session for quiz:', quizId);
                
                if (!currentSessionDuration || currentSessionDuration < 15) {
                    showError('Session duration must be at least 15 minutes.');
                    return;
                }

                const response = await fetch('/api/quiz/exam-session/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        quizId: quizId,
                        sessionDurationMinutes: currentSessionDuration,
                        classId: classId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`🔥 Exam session started! Students have ${currentSessionDuration} minutes to complete the quiz.`);
                    
                    // Store session info
                    activeExamSessions.set(quizId, {
                        sessionId: result.sessionId,
                        endsAt: new Date(result.endsAt),
                        duration: currentSessionDuration
                    });
                    
                    // Start countdown timer
                    startExamSessionTimer(quizId, result.sessionId, new Date(result.endsAt));
                    
                    // Refresh quiz list to show session status
                    loadQuizzes();
                    
                } else {
                    showError('Failed to start exam session: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error starting exam session:', error);
                showError('Network error while starting exam session.');
            }
        }

        // 🆕 NEW: End Exam Session Function
        async function endExamSession(quizId, sessionId) {
            try {
                if (!confirm('Are you sure you want to end this exam session? This will auto-submit all active quiz attempts.')) {
                    return;
                }

                console.log('🛑 Ending exam session:', sessionId);
                
                const response = await fetch('/api/quiz/exam-session/end', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        quizId: quizId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`🛑 Exam session ended! ${result.autoSubmittedCount || 0} submissions were auto-submitted.`);
                    
                    // Clean up local tracking
                    activeExamSessions.delete(quizId);
                    if (examSessionTimers.has(quizId)) {
                        clearInterval(examSessionTimers.get(quizId));
                        examSessionTimers.delete(quizId);
                    }
                    
                    // Refresh quiz list
                    loadQuizzes();
                    
                } else {
                    showError('Failed to end exam session: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error ending exam session:', error);
                showError('Network error while ending exam session.');
            }
        }

        // 🆕 NEW: Exam Session Timer Function
        function startExamSessionTimer(quizId, sessionId, endsAt) {
            // Clear any existing timer
            if (examSessionTimers.has(quizId)) {
                clearInterval(examSessionTimers.get(quizId));
            }

            const timer = setInterval(() => {
                const now = new Date();
                const remainingMs = endsAt - now;
                const remainingSeconds = Math.max(0, Math.floor(remainingMs / 1000));

                // Update countdown display if visible
                const countdownElement = document.querySelector(`[data-session-id="${sessionId}"] .session-countdown`);
                if (countdownElement) {
                    countdownElement.textContent = formatSessionTime(remainingSeconds);
                }

                // Auto-end session when time runs out
                if (remainingSeconds <= 0) {
                    clearInterval(timer);
                    examSessionTimers.delete(quizId);
                    
                    // Auto-end session
                    console.log('⏰ Session time expired, auto-ending session');
                    endExamSession(quizId, sessionId);
                }
            }, 1000);

            examSessionTimers.set(quizId, timer);
            console.log('⏰ Session timer started for quiz:', quizId);
        }

        // 🆕 NEW: Format Session Time Function
        function formatSessionTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            if (hours > 0) {
                return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
            }
        }

        // 🆕 NEW: Check for Active Exam Sessions on Load
        async function loadActiveExamSessions() {
            try {
                const response = await fetch(`/api/quiz/exam-sessions/active/${classId}`);
                const result = await response.json();

                if (result.success && result.sessions.length > 0) {
                    console.log('🔥 Found', result.sessions.length, 'active exam sessions');
                    
                    result.sessions.forEach(session => {
                        activeExamSessions.set(session.quizId, {
                            sessionId: session.sessionId,
                            endsAt: new Date(session.endsAt),
                            duration: session.sessionDurationMinutes
                        });
                        
                        // Start timer for this session
                        startExamSessionTimer(session.quizId, session.sessionId, new Date(session.endsAt));
                    });
                }
            } catch (error) {
                console.error('❌ Error loading active exam sessions:', error);
            }
        }

        // 🆕 NEW: Pending Requests Modal Functions
        function openPendingRequestsModal() {
            console.log('📬 Opening pending requests modal');
            document.getElementById('pendingRequestsModal').classList.add('active');
            loadPendingRequestsForModal();
        }

        function closePendingRequestsModal() {
            console.log('📬 Closing pending requests modal');
            document.getElementById('pendingRequestsModal').classList.remove('active');
        }

        // 🆕 NEW: Load pending requests specifically for modal
        async function loadPendingRequestsForModal() {
            try {
                console.log('📬 Loading pending requests for modal');
                
                const response = await fetch(`/api/classes/${classId}/join-requests`);
                const result = await response.json();

                if (result.success) {
                    displayPendingRequestsInModal(result.requests);
                } else {
                    console.error('❌ Failed to load pending requests:', result.message);
                }
            } catch (error) {
                console.error('❌ Error loading pending requests for modal:', error);
                document.getElementById('pendingRequestsModalBody').innerHTML = `
                    <p style="text-align: center; color: #ef4444;">Failed to load pending requests.</p>
                `;
            }
        }

        // 🆕 NEW: Display pending requests in modal
        function displayPendingRequestsInModal(requests) {
            const container = document.getElementById('pendingRequestsModalBody');
            
            if (requests.length === 0) {
                container.innerHTML = `
                    <div class="no-pending-requests">
                        <h3>📭 No Pending Requests</h3>
                        <p>Students will appear here when they request to join using your class code.</p>
                    </div>
                `;
                return;
            }

            const requestsHTML = requests.map(request => `
                <div class="modal-request-item">
                    <div class="modal-request-info">
                        <div class="modal-request-student-name">${request.studentName}</div>
                        <div class="modal-request-meta">
                            <strong>Enrollment:</strong> ${request.studentEnrollment}<br>
                            <strong>Requested:</strong> ${request.timeAgo}<br>
                            <strong>Join Code:</strong> ${request.joinCode}
                        </div>
                    </div>
                    <div class="modal-request-actions">
                        <button class="modal-approve-btn" onclick="processJoinRequestFromModal('${request.requestId}', 'approve')">
                            ✅ Approve
                        </button>
                        <button class="modal-reject-btn" onclick="processJoinRequestFromModal('${request.requestId}', 'reject')">
                            ❌ Reject
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = requestsHTML;
        }

        // 🆕 NEW: Process join request from modal (simplified - no rejection reason)
        async function processJoinRequestFromModal(requestId, action) {
            try {
                console.log(`⚖️ Processing join request from modal: ${action}`, requestId);
                
                const response = await fetch(`/api/classes/${classId}/join-requests/${requestId}/${action}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        rejectionReason: action === 'reject' ? 'Request rejected by teacher' : '' 
                    })
                });

                const result = await response.json();

                if (result.success) {
                    if (action === 'approve') {
                        showSuccess(`${result.studentName} has been added to the class!`);
                        loadStudents(); // Refresh student list
                        loadAnalytics(); // Refresh analytics
                    } else {
                        showSuccess(`Join request from ${result.studentName} has been rejected.`);
                    }
                    
                    // Refresh modal content and update badge
                    loadPendingRequestsForModal();
                    updatePendingRequestsBadge();
                } else {
                    showError('Failed to process request: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error processing join request from modal:', error);
                showError('Network error while processing request.');
            }
        }

        // 🆕 NEW: Update pending requests badge
        async function updatePendingRequestsBadge() {
            try {
                const response = await fetch(`/api/classes/${classId}/join-requests`);
                const result = await response.json();

                if (result.success) {
                    pendingRequestsCount = result.requests.length;
                    const badge = document.getElementById('pendingRequestsBadge');
                    const btn = document.getElementById('pendingRequestsBtn');
                    
                    if (pendingRequestsCount > 0) {
                        badge.textContent = pendingRequestsCount;
                        badge.style.display = 'flex';
                        btn.innerHTML = `📬 Pending Requests <span class="notification-badge" id="pendingRequestsBadge">${pendingRequestsCount}</span>`;
                    } else {
                        badge.style.display = 'none';
                        btn.innerHTML = '📬 Pending Requests';
                    }
                    
                    console.log(`🔔 Updated badge: ${pendingRequestsCount} pending requests`);
                }
            } catch (error) {
                console.error('❌ Error updating pending requests badge:', error);
            }
        }

        // 🆕 NEW: Join Code Management Functions (existing functions updated)
        async function generateJoinCode() {
            try {
                console.log('🔐 Generating join code for class:', classId);
                
                const response = await fetch(`/api/classes/${classId}/generate-join-code`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Join code generated: ${result.joinCode} (Valid for 10 minutes)`);
                    displayActiveJoinCode(result);
                    startCountdownTimer(result.expiresAt);
                } else {
                    showError('Failed to generate join code: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error generating join code:', error);
                showError('Network error while generating join code.');
            }
        }

        function displayActiveJoinCode(codeData) {
            const container = document.getElementById('joinCodeDisplay');
            
            const expiresAt = new Date(codeData.expiresAt);
            const remainingSeconds = Math.max(0, Math.floor((expiresAt - new Date()) / 1000));
            
            container.innerHTML = `
                <div class="active-code-display">
                    <div class="code-value">${codeData.joinCode}</div>
                    <div class="code-info">
                        Share with students • Used: ${codeData.usageCount}/${codeData.maxUsage}
                    </div>
                    <div class="countdown-timer" id="countdownTimer">
                        ⏰ Expires in: <span id="timeRemaining">${formatTime(remainingSeconds)}</span>
                    </div>
                </div>
            `;
        }

        function startCountdownTimer(expiresAt) {
            // Clear existing timer
            if (joinCodeTimer) {
                clearInterval(joinCodeTimer);
            }

            joinCodeTimer = setInterval(() => {
                const now = new Date();
                const expiry = new Date(expiresAt);
                const remainingSeconds = Math.max(0, Math.floor((expiry - now) / 1000));

                const timeDisplay = document.getElementById('timeRemaining');
                if (timeDisplay) {
                    timeDisplay.textContent = formatTime(remainingSeconds);
                }

                if (remainingSeconds <= 0) {
                    clearInterval(joinCodeTimer);
                    showCodeExpired();
                    updatePendingRequestsBadge(); // Update badge when code expires
                }
            }, 1000);
        }

        function showCodeExpired() {
            const container = document.getElementById('joinCodeDisplay');
            container.innerHTML = `
                <div class="no-active-code">
                    <p>⏰ The join code has expired.</p>
                    <p style="font-size: 0.8rem; margin-top: 0.5rem;">Generate a new code to allow more students to join.</p>
                </div>
            `;
        }

        async function loadActiveJoinCode() {
            try {
                const response = await fetch(`/api/classes/${classId}/active-join-code`);
                const result = await response.json();

                if (result.success && result.hasActiveCode) {
                    displayActiveJoinCode(result);
                    startCountdownTimer(result.expiresAt);
                } else {
                    document.getElementById('joinCodeDisplay').innerHTML = `
                        <div class="no-active-code">
                            <p>🚀 Generate a join code to let students request to join!</p>
                            <p style="font-size: 0.8rem; margin-top: 0.5rem;">Valid for 10 minutes, up to 50 requests.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ Error loading active join code:', error);
            }
        }

        // 🆕 NEW: Updated loadPendingRequests function (now just updates badge)
        async function loadPendingRequests() {
            // This function now just updates the badge instead of displaying requests
            await updatePendingRequestsBadge();
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(e) {
            const modal = document.getElementById('pendingRequestsModal');
            if (e.target === modal) {
                closePendingRequestsModal();
            }
        });

        // Helper function for time formatting
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            
            if (minutes > 0) {
                return `${minutes}m ${remainingSeconds}s`;
            } else {
                return `${remainingSeconds}s`;
            }
        }

        // 🆕 NEW: Helper functions for formatting
        function formatPercentage(value, decimals = 1) {
            const num = parseFloat(value) || 0;
            return num.toFixed(decimals);
        }

        function formatNumber(value, decimals = 0) {
            const num = parseFloat(value) || 0;
            return num.toFixed(decimals);
        }

        // 🆕 NEW: Calculate time efficiency
        function calculateTimeEfficiency(timeTakenSeconds, quizDurationSeconds) {
            if (!timeTakenSeconds || !quizDurationSeconds || quizDurationSeconds <= 0) return 0;
            
            // Time Efficiency = (Quiz Duration - Time Taken) / Quiz Duration * 100
            // But ensure it's not negative
            const efficiency = Math.max(0, (quizDurationSeconds - timeTakenSeconds) / quizDurationSeconds * 100);
            return Math.min(100, efficiency); // Cap at 100%
        }

        // 🆕 NEW: Calculate ranking points
        function calculateRankingPoints(averageScore, timeEfficiency) {
            // Points Formula: Points = (Score × 0.7) + (Time Efficiency × 0.3)
            const score = parseFloat(averageScore) || 0;
            const efficiency = parseFloat(timeEfficiency) || 0;
            return parseFloat((score * 0.7 + efficiency * 0.3).toFixed(1));
        }

        // 🆕 NEW: Loading overlay functions
        function showLoadingOverlay(text = 'Processing...', progress = 0) {
            const overlay = document.getElementById('loadingOverlay');
            const loadingText = document.getElementById('loadingText');
            const progressBar = document.getElementById('loadingProgressBar');
            const loadingGif = document.getElementById('loadingGif');
            
            // Preload and force refresh the GIF
            loadingGif.src = `/Animation-1751710786188.gif?t=${Date.now()}`;
            
            loadingText.textContent = text;
            loadingText.classList.add('fade-in');
            loadingText.classList.remove('fade-out');
            progressBar.style.width = progress + '%';
            
            overlay.classList.add('active');
            
            // Disable all interactive elements
            document.body.style.overflow = 'hidden';
            console.log('🔄 Loading overlay shown:', text, `(${progress}%)`);
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            overlay.classList.remove('active');
            
            // Re-enable scrolling
            document.body.style.overflow = '';
            console.log('✅ Loading overlay hidden');
        }

        function updateLoadingProgress(text, progress) {
            const loadingText = document.getElementById('loadingText');
            const progressBar = document.getElementById('loadingProgressBar');
            
            // Fade out current text
            loadingText.classList.add('fade-out');
            loadingText.classList.remove('fade-in');
            
            // Update text after fade out completes
            setTimeout(() => {
                loadingText.textContent = text;
                loadingText.classList.remove('fade-out');
                loadingText.classList.add('fade-in');
            }, 150); // Half of the CSS transition time
            
            progressBar.style.width = progress + '%';
            
            console.log('📈 Loading progress updated:', text, `(${progress}%)`);
        }

        // Modal Functions
        function openCreateQuizModal() {
            console.log('🎯 Opening create quiz modal');
            document.getElementById('createQuizModal').classList.add('active');
            
            // Reset form and values when opening
            document.getElementById('createQuizForm').reset();
            setDuration(15);
            setQuestions(10);
            
            // 🆕 NEW: Reset auto-start exam toggle
            document.getElementById('autoStartExamToggle').checked = false;
        }

        function closeCreateQuizModal() {
            console.log('🎯 Closing create quiz modal');
            document.getElementById('createQuizModal').classList.remove('active');
        }

        // Close modal when clicking outside
        document.getElementById('createQuizModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCreateQuizModal();
            }
        });

        // Duration adjustment functions
        function adjustDuration(change) {
            const newDuration = Math.max(2, Math.min(60, currentDuration + change));
            setDuration(newDuration);
        }

        function setDuration(minutes) {
            currentDuration = Math.max(2, Math.min(60, minutes));
            
            // Update display
            document.getElementById('durationValue').textContent = currentDuration;
            
            // Update preset buttons
            document.querySelectorAll('.compact-presets .compact-preset-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Highlight active preset if it matches
            const matchingPreset = document.querySelector(`.compact-preset-btn[onclick="setDuration(${currentDuration})"]`);
            if (matchingPreset) {
                matchingPreset.classList.add('active');
            }
            
            // Update button states
            const decreaseBtn = document.querySelector('.compact-btn[onclick="adjustDuration(-1)"]');
            const increaseBtn = document.querySelector('.compact-btn[onclick="adjustDuration(1)"]');
            
            if (decreaseBtn) decreaseBtn.disabled = currentDuration <= 2;
            if (increaseBtn) increaseBtn.disabled = currentDuration >= 60;
            
            console.log('🕒 Duration set to:', currentDuration, 'minutes');
        }

        // Question adjustment functions
        function adjustQuestions(change) {
            const newQuestions = Math.max(5, Math.min(30, currentQuestions + change));
            setQuestions(newQuestions);
        }

        function setQuestions(count) {
            currentQuestions = Math.max(5, Math.min(30, count));
            
            // Update display
            document.getElementById('questionsValue').textContent = currentQuestions;
            
            // Update preset buttons
            document.querySelectorAll('.compact-presets .compact-preset-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Highlight active preset if it matches
            const matchingPreset = document.querySelector(`.compact-preset-btn[onclick="setQuestions(${currentQuestions})"]`);
            if (matchingPreset) {
                matchingPreset.classList.add('active');
            }
            
            // Update button states
            const decreaseBtn = document.querySelector('.compact-btn[onclick="adjustQuestions(-1)"]');
            const increaseBtn = document.querySelector('.compact-btn[onclick="adjustQuestions(1)"]');
            
            if (decreaseBtn) decreaseBtn.disabled = currentQuestions <= 5;
            if (increaseBtn) increaseBtn.disabled = currentQuestions >= 30;
            
            console.log('📝 Questions set to:', currentQuestions);
        }

        // Quiz Viewer Functions
        async function viewQuiz(quizId) {
            console.log('👁️ Opening quiz viewer for:', quizId);
            
            // Show modal
            document.getElementById('quizViewerModal').classList.add('active');
            
            // Load quiz data
            try {
                const response = await fetch(`/api/teacher/quiz/${quizId}/full`);
                const data = await response.json();
                
                if (data.success) {
                    displayQuizInModal(data.quiz);
                } else {
                    document.getElementById('modalQuizContent').innerHTML = `
                        <div class="alert alert-error">
                            <strong>Error:</strong> ${data.message}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ Error loading quiz:', error);
                document.getElementById('modalQuizContent').innerHTML = `
                    <div class="alert alert-error">
                        <strong>Error:</strong> Failed to load quiz questions.
                    </div>
                `;
            }
        }

        function displayQuizInModal(quiz) {
            document.getElementById('modalQuizTitle').textContent = quiz.lectureTitle;
            
            const questionsHTML = quiz.questions.map((question, index) => {
                const hasExplanations = question.explanations && Object.keys(question.explanations).some(key => 
                    key !== question.correct_answer && question.explanations[key] && question.explanations[key].trim() !== ''
                );

                const optionsHTML = ['A', 'B', 'C', 'D'].map(letter => `
                    <div class="option-item ${letter === question.correct_answer ? 'correct' : ''}">
                        <div class="option-letter">${letter}</div>
                        <div class="option-text">${question.options[letter]}</div>
                        ${letter === question.correct_answer ? '<div class="correct-indicator">✓ Correct</div>' : ''}
                    </div>
                `).join('');

                let explanationsHTML = '';
                if (hasExplanations || question.correctAnswerExplanation) {
                    explanationsHTML = `
                        <div class="explanations-section" id="explanations-${index}">
                            ${question.correctAnswerExplanation ? `
                                <div class="explanation-item correct">
                                    <div class="explanation-label">✓ Correct Answer (${question.correct_answer})</div>
                                    <div class="explanation-text">${question.correctAnswerExplanation}</div>
                                </div>
                            ` : ''}
                            ${['A', 'B', 'C', 'D'].map(letter => {
                                if (letter !== question.correct_answer && question.explanations && question.explanations[letter] && question.explanations[letter].trim() !== '') {
                                    return `
                                        <div class="explanation-item">
                                            <div class="explanation-label">Why ${letter} is incorrect:</div>
                                            <div class="explanation-text">${question.explanations[letter]}</div>
                                        </div>
                                    `;
                                }
                                return '';
                            }).join('')}
                        </div>
                    `;
                }

                return `
                    <div class="quiz-question-item">
                        <div class="question-header">
                            <div class="question-number">Question ${index + 1}</div>
                            ${hasExplanations || question.correctAnswerExplanation ? `
                                <button class="explanation-toggle" onclick="toggleExplanations(${index})">
                                    Show Explanations
                                </button>
                            ` : ''}
                        </div>
                        <div class="question-text">${question.question}</div>
                        <div class="options-list">
                            ${optionsHTML}
                        </div>
                        ${explanationsHTML}
                    </div>
                `;
            }).join('');

            document.getElementById('modalQuizContent').innerHTML = `
                <div style="margin-bottom: 1rem;">
                    <strong>Quiz Details:</strong> ${quiz.totalQuestions} questions • ${quiz.durationMinutes || 15} minutes duration
                </div>
                ${questionsHTML}
            `;
        }

        function toggleExplanations(questionIndex) {
            const explanationsSection = document.getElementById(`explanations-${questionIndex}`);
            const toggleButton = explanationsSection.parentElement.querySelector('.explanation-toggle');
            
            if (explanationsSection.classList.contains('active')) {
                explanationsSection.classList.remove('active');
                toggleButton.textContent = 'Show Explanations';
            } else {
                explanationsSection.classList.add('active');
                toggleButton.textContent = 'Hide Explanations';
            }
        }

        function closeQuizViewer() {
            document.getElementById('quizViewerModal').classList.remove('active');
        }

        // Close modal when clicking outside
        document.getElementById('quizViewerModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeQuizViewer();
            }
        });

        // 🔄 UPDATED: Enhanced form submission handler with loading overlay and exam session support
        document.getElementById('createQuizForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Show loading overlay
            showLoadingOverlay('Uploading your file...', 0);
            
            const formData = new FormData();
            formData.append('lectureFile', document.getElementById('lectureFile').files[0]);
            formData.append('title', document.getElementById('lectureTitle').value);
            formData.append('classId', classId);
            formData.append('durationMinutes', currentDuration.toString());
            formData.append('questionCount', currentQuestions.toString());

            // Check if auto-start exam session is enabled
            const autoStartExam = document.getElementById('autoStartExamToggle').checked;

            try {
                updateLoadingProgress('Uploading your file...', 10);
                
                const response = await fetch('/upload_lecture', {
                    method: 'POST',
                    body: formData
                });

                // 🔧 BUG FIX: Check if response is valid before parsing
                if (!response.ok) {
                    throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();

                // 🔧 BUG FIX: Validate result object
                if (!result || typeof result !== 'object') {
                    throw new Error('Invalid response from server');
                }

                if (result.success) {
                    updateLoadingProgress('Processing data...', 35);
                    console.log('✅ File uploaded successfully, starting quiz generation...');
                    
                    // Generate quiz
                    updateLoadingProgress('Generating questions...', 60);
                    const quizResult = await generateQuizFromLecture(result.lectureId, currentDuration, currentQuestions);
                    
                    // 🔧 BUG FIX: Validate quiz result
                    if (quizResult && quizResult.success) {
                        updateLoadingProgress('Quiz created successfully!', 85);
                        
                        // 🆕 NEW: Auto-start exam session if enabled
                        if (autoStartExam && quizResult.quizId) {
                            updateLoadingProgress('Starting exam session...', 95);
                            await startAutoExamSession(quizResult.quizId, currentDuration);
                        }
                        
                        updateLoadingProgress('Complete!', 100);
                        
                        setTimeout(() => {
                            hideLoadingOverlay();
                            closeCreateQuizModal();
                            
                            const examMessage = autoStartExam ? ' Exam session started automatically!' : '';
                            showSuccess(`🎉 Quiz created successfully!${examMessage}`);
                            loadQuizzes();
                        }, 1000);
                    } else {
                        throw new Error(quizResult?.message || 'Quiz generation failed');
                    }
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
            } catch (error) {
                console.error('❌ Upload/Generation error:', error);
                hideLoadingOverlay();
                showError('Failed to create quiz: ' + error.message);
            }
        });


        // 🆕 NEW: Auto-start exam session after quiz creation
        async function startAutoExamSession(quizId, durationMinutes) {
            try {
                console.log('🚨 Auto-starting exam session for quiz:', quizId);
                
                const response = await fetch('/api/quiz/exam-session/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        quizId: quizId,
                        sessionDurationMinutes: durationMinutes,
                        classId: classId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    console.log('✅ Exam session auto-started successfully');
                    return true;
                } else {
                    console.error('❌ Failed to auto-start exam session:', result.message);
                    return false;
                }
            } catch (error) {
                console.error('❌ Error auto-starting exam session:', error);
                return false;
            }
        }

        // 🔄 UPDATED: Quiz generation with improved error handling
        async function generateQuizFromLecture(lectureId, durationMinutes, questionCount) {
    try {
        console.log('🤖 QUIZ GENERATION - Starting with settings:', {
            lectureId: lectureId,
            durationMinutes: durationMinutes,
            questionCount: questionCount
        });
        
        // ✅ ENSURE values are valid
        if (!lectureId) {
            throw new Error('Lecture ID is required');
        }
        
        const safeDuration = parseInt(durationMinutes) || 15;
        const safeQuestions = parseInt(questionCount) || 10;
        
        const requestBody = {
            durationMinutes: safeDuration,
            questionCount: safeQuestions
        };
        
        console.log('📡 QUIZ GENERATION - Request body:', requestBody);
        
        const response = await fetch(`/generate_quiz/${lectureId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        // 🔧 BUG FIX: Check response status
        if (!response.ok) {
            throw new Error(`Generation failed: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        
        // 🔧 BUG FIX: Validate result
        if (!result || typeof result !== 'object') {
            throw new Error('Invalid response from quiz generation');
        }
        
        console.log('📡 QUIZ GENERATION - Server response:', result);

        if (result.success) {
            console.log('✅ Quiz generated successfully');
            return result; // Return the full result object
        } else {
            throw new Error(result.message || 'Quiz generation failed');
        }
    } catch (error) {
        console.error('❌ Quiz generation error:', error);
        throw error; // Re-throw to be handled by caller
    }
}

// 🔄 UPDATED: Simplified quiz display (remove complex exam session UI)
function displayQuizzes(quizzes) {
    const container = document.getElementById('quizzesContainer');
    
    if (quizzes.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>📝 No Quizzes Yet</h3>
                <p>Click the "Create Quiz" button to upload a lecture and create your first quiz!</p>
            </div>
        `;
        return;
    }

    const quizzesHTML = quizzes.map(quiz => {
        const durationMinutes = quiz.durationMinutes || 15;
        const durationText = `${durationMinutes}min`;
        
        let durationBadge = '';
        if (durationMinutes <= 10) {
            durationBadge = '⚡ Quick';
        } else if (durationMinutes <= 30) {
            durationBadge = '⏱️ Standard';
        } else {
            durationBadge = '🕐 Extended';
        }

        // 🆕 NEW: Check for active exam session
        let examSessionHTML = '';
        if (quiz.hasActiveExamSession) {
            examSessionHTML = `
                <div class="exam-timer-display">
                    <span class="timer-label">🚨 LIVE EXAM SESSION</span>
                    <div id="quizTimer_${quiz._id}">Loading...</div>
                </div>
            `;
        }

        return `
            <div class="quiz-item">
                <div class="quiz-title">
                    ${quiz.lectureTitle}
                    ${quiz.hasActiveExamSession ? '<span style="color: #ef4444; font-weight: bold;">🚨 LIVE</span>' : ''}
                </div>
                <div class="quiz-meta">
                    📝 ${quiz.totalQuestions} questions • 
                    ⏱️ ${durationText} duration (${durationBadge}) •
                    📅 Created ${new Date(quiz.generatedDate).toLocaleDateString()} •
                    🆔 ${quiz._id.toString().slice(-6)}
                </div>
                <div class="quiz-stats">
                    <span class="quiz-stat">📊 Avg: ${formatPercentage(quiz.averageScore || 0)}%</span>
                    <span class="quiz-stat">🎯 High: ${formatPercentage(quiz.highestScore || 0)}%</span>
                    <span class="quiz-stat">👥 ${quiz.totalAttempts || 0} attempts</span>
                    <span class="quiz-stat">
                        ${quiz.isActive ? '🟢 Active' : '🔴 Inactive'}
                    </span>
                </div>
                <div class="quiz-actions">
                    <a href="/lecture_results/${quiz.lectureId}" class="btn btn-secondary" 
                    style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                        📊 View Results
                    </a>
                    <button class="btn btn-info" onclick="viewQuiz('${quiz._id}')" 
                            style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                        👁️ View Quiz
                    </button>
                    ${quiz.hasActiveExamSession ? `
                        <button class="btn" onclick="endExamSession('${quiz._id}')" 
                                style="font-size: 0.8rem; padding: 0.5rem 1rem; background: #6b7280;">
                            🛑 End Exam
                        </button>
                    ` : ''}
                </div>
                ${examSessionHTML}
            </div>
        `;
    }).join('');

    container.innerHTML = quizzesHTML;
    
    // Start timers for active exam sessions
    quizzes.forEach(quiz => {
        if (quiz.hasActiveExamSession && quiz.examEndTime) {
            startQuizTimer(quiz._id, new Date(quiz.examEndTime));
        }
    });
}

// 🆕 NEW: Quick exam session start
async function startQuickExamSession(quizId, durationMinutes) {
    try {
        const response = await fetch('/api/quiz/exam-session/start', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                quizId: quizId,
                sessionDurationMinutes: durationMinutes,
                classId: classId
            })
        });

        const result = await response.json();

        if (result.success) {
            showSuccess(`🚨 Exam Session Started! ${durationMinutes} minutes duration.`);
            loadQuizzes(); // Refresh to show timer
        } else {
            showError('Failed to start exam session: ' + result.message);
        }
    } catch (error) {
        console.error('❌ Error starting quick exam session:', error);
        showError('Network error while starting exam session.');
    }
}

// 🆕 NEW: Individual quiz timer
function startQuizTimer(quizId, endsAt) {
    const updateTimer = () => {
        const now = new Date();
        const remaining = Math.max(0, Math.floor((endsAt - now) / 1000));
        const timerElement = document.getElementById(`quizTimer_${quizId}`);
        
        if (timerElement) {
            if (remaining > 0) {
                const minutes = Math.floor(remaining / 60);
                const seconds = remaining % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            } else {
                timerElement.textContent = 'ENDED';
                setTimeout(() => loadQuizzes(), 2000); // Refresh after session ends
                return;
            }
        }
    };
    
    updateTimer(); // Initial call
    const interval = setInterval(updateTimer, 1000);
    
    // Store interval for cleanup if needed
    if (!window.quizTimers) window.quizTimers = {};
    window.quizTimers[quizId] = interval;
}

// 🆕 NEW: End exam session
async function endExamSession(quizId) {
    if (!confirm('Are you sure you want to end this exam session? This will auto-submit all active attempts.')) {
        return;
    }

    try {
        const response = await fetch('/api/quiz/exam-session/end', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                quizId: quizId,
                classId: classId
            })
        });

        const result = await response.json();

        if (result.success) {
            showSuccess('🛑 Exam session ended successfully!');
            loadQuizzes();
        } else {
            showError('Failed to end exam session: ' + result.message);
        }
    } catch (error) {
        console.error('❌ Error ending exam session:', error);
        showError('Network error while ending exam session.');
    }
}



        // 🆕 NEW: Adjust session duration for specific quiz
        function adjustQuizSessionDuration(quizId, change) {
            const valueElement = document.getElementById(`sessionDuration_${quizId}`);
            const currentValue = parseInt(valueElement.textContent) || 60;
            const newValue = Math.max(15, Math.min(300, currentValue + change));
            valueElement.textContent = newValue;
        }

        // 🆕 NEW: Start exam session for specific quiz
        function startExamSessionForQuiz(quizId) {
            const sessionDuration = parseInt(document.getElementById(`sessionDuration_${quizId}`).textContent) || 60;
            
            // Temporarily set the session duration and start session
            const originalSessionDuration = currentSessionDuration;
            currentSessionDuration = sessionDuration;
            
            startExamSession(quizId).then(() => {
                // Restore original session duration
                currentSessionDuration = originalSessionDuration;
            });
        }

        // Edit class form handler
        document.getElementById('editClassForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('editClassName').value.trim(),
                subject: document.getElementById('editClassSubject').value.trim(),
                description: document.getElementById('editClassDescription').value.trim()
            };

            if (!formData.name || !formData.subject) {
                showError('Class name and subject are required.');
                return;
            }

            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            try {
                submitButton.textContent = '⏳ Updating...';
                submitButton.disabled = true;

                console.log('✏️ Updating class:', formData);

                const response = await fetch(`/api/classes/${classId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Class "${result.class.name}" updated successfully!`);
                    
                    // Update the page title and class info
                    document.getElementById('classTitle').textContent = result.class.name;
                    document.getElementById('classSubject').textContent = result.class.subject;
                    document.getElementById('breadcrumbClass').textContent = result.class.name;
                    
                    // Update the browser title
                    document.title = `Manage ${result.class.name} - Quizzie`;
                    
                    console.log('✅ Class updated successfully');
                } else {
                    showError('Failed to update class: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error updating class:', error);
                showError('Network error while updating class.');
            } finally {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        // Load class settings
        async function loadClassSettings() {
            try {
                console.log('⚙️ Loading class settings...');
                
                const response = await fetch(`/api/classes/${classId}`);
                const data = await response.json();
                
                if (data.success) {
                    const classData = data.class;
                    
                    // Populate the edit form with current class data
                    document.getElementById('editClassName').value = classData.name || '';
                    document.getElementById('editClassSubject').value = classData.subject || '';
                    document.getElementById('editClassDescription').value = classData.description || '';
                    
                    console.log('✅ Class settings loaded');
                } else {
                    console.error('❌ Failed to load class settings:', data.message);
                    showError('Failed to load class settings: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading class settings:', error);
                showError('Network error while loading class settings.');
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {

            // 🆕 NEW: Preload the loading GIF for instant display
            const preloadGif = new Image();
            preloadGif.src = '/Animation-1751710786188.gif';
            preloadGif.onload = () => {
                console.log('✅ Loading GIF preloaded successfully');
                // Set the src immediately to the image in the overlay
                document.getElementById('loadingGif').src = preloadGif.src;
            };
            preloadGif.onerror = () => {
                console.error('❌ Failed to preload loading GIF - check if file exists at /public/Animation-1751710786188.gif');
                // Fallback: try without timestamp
                document.getElementById('loadingGif').src = '/Animation-1751710786188.gif';
            };

            console.log('🔄 DOM loaded, starting initialization...');
            
            // Set initial values
            document.getElementById('classTitle').textContent = className || 'Loading...';
            document.getElementById('classSubject').textContent = classSubject || 'Loading...';
            document.getElementById('breadcrumbClass').textContent = className || 'Loading...';
            
            // Check URL parameters for tab redirect
            const urlParams = new URLSearchParams(window.location.search);
            const targetTab = urlParams.get('tab');
            
            if (targetTab && targetTab !== 'overview') {
                console.log('🎯 Redirecting to tab:', targetTab);
                setTimeout(() => {
                    showSectionByName(targetTab);
                }, 100);
            }
            
            // Load initial data
            loadAnalytics();
            loadQuizzes();
            loadStudents();
            loadActiveJoinCode();
            updatePendingRequestsBadge(); // 🆕 NEW: Load badge instead of full requests
            loadActiveExamSessions(); // 🆕 NEW: Load active exam sessions

            // Initialize selectors
            setDuration(15);
            setQuestions(10);
            setSessionDuration(60);
        });

        // Add Student Form Handler
        document.getElementById('addStudentForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const enrollmentNumber = document.getElementById('enrollmentNumber').value.trim();
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            console.log('📝 Adding student:', {
                enrollmentNumber,
                classId
            });
            
            try {
                submitButton.textContent = '⏳ Adding...';
                submitButton.disabled = true;

                const response = await fetch(`/api/classes/${classId}/students`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ enrollmentNumber })
                });

                console.log('📡 Response status:', response.status);
                
                const result = await response.json();
                console.log('📡 Response data:', result);

                if (result.success) {
                    showSuccess(`Student ${result.student.studentName} added successfully!`);
                    document.getElementById('addStudentForm').reset();
                    loadStudents();
                    loadAnalytics();
                } else {
                    console.error('❌ Failed to add student:', result);
                    showError('Failed to add student: ' + result.message);
                    
                    if (result.debug) {
                        console.error('🔍 Debug info:', result.debug);
                    }
                }
            } catch (error) {
                console.error('❌ Add student error:', error);
                showError('Network error while adding student.');
            } finally {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        // Navigation functions
        function showSection(sectionName) {
            console.log('📍 Switching to section:', sectionName);
            
            // Update active navigation link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            event.target.closest('.nav-link').classList.add('active');

            // Update content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(sectionName + 'Section').classList.add('active');

            // Load section-specific data
            switch(sectionName) {
                case 'analytics':
                    loadAnalytics();
                    break;
                case 'quizzes':
                    loadQuizzes();
                    loadActiveExamSessions(); // 🆕 NEW: Load exam sessions when viewing quizzes
                    break;
                case 'students':
                    loadStudents();
                    loadActiveJoinCode();
                    updatePendingRequestsBadge(); // 🆕 NEW: Update badge instead of loading requests
                    break;
                case 'settings':
                    loadClassSettings();
                    break;
            }
        }

        // Programmatic tab switching
        function showSectionByName(sectionName) {
            console.log('🎯 Programmatically switching to section:', sectionName);
            
            // Update active navigation link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                const linkText = link.textContent.toLowerCase();
                if (linkText.includes(sectionName.toLowerCase())) {
                    link.classList.add('active');
                }
            });

            // Update content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            const targetSection = document.getElementById(sectionName + 'Section');
            if (targetSection) {
                targetSection.classList.add('active');
                
                // Load section-specific data
                switch(sectionName) {
                    case 'analytics':
                        loadAnalytics();
                        break;
                    case 'quizzes':
                        loadQuizzes();
                        loadActiveExamSessions();
                        break;
                    case 'students':
                        loadStudents();
                        loadActiveJoinCode();
                        updatePendingRequestsBadge();
                        break;
                }
            } else {
                console.warn('⚠️ Section not found:', sectionName);
                // Default to analytics
                document.getElementById('analyticsSection').classList.add('active');
                document.querySelector('.nav-link').classList.add('active');
                loadAnalytics();
            }
        }

        
        // 🔄 UPDATED: Enhanced analytics loading function
        async function loadAnalytics() {
            try {
                console.log('📊 Loading comprehensive analytics data...');
                
                // Load all required data
                const [overviewResponse, analyticsResponse, teacherRankingsResponse, lastQuizResponse] = await Promise.all([
                    fetch(`/api/classes/${classId}/overview`),
                    fetch(`/api/classes/${classId}/analytics`),
                    fetch(`/api/teacher/class/${classId}/rankings`),
                    fetch(`/api/classes/${classId}/last-quiz-rankings`)
                ]);
                
                const overviewData = await overviewResponse.json();
                const analyticsResponseData = await analyticsResponse.json();
                const rankingsData = await teacherRankingsResponse.json();
                const lastQuizData = await lastQuizResponse.json();
                
                if (overviewData.success) {
                    classData = overviewData.classData;
                    updateClassInfo();
                    updateAnalyticsStats(overviewData);
                    
                    if (overviewData.performanceTrend && overviewData.performanceTrend.length > 0) {
                        createPerformanceTrendChart(overviewData.performanceTrend);
                    } else {
                        console.warn('⚠️ No performance trend data available');
                        createPerformanceTrendChart([]);
                    }
                }
                
                if (analyticsResponseData.success) {
                    analyticsData = analyticsResponseData.analytics;
                    createDistributionChart(analyticsData.performanceDistribution || {});
                    displayDetailedAnalytics(analyticsData);
                }

                if (rankingsData.success) {
                    displayClassRankings(rankingsData.data.rankings);
                } else {
                    console.warn('⚠️ No ranking data:', rankingsData.message);
                    displayClassRankings([]);
                }

                if (lastQuizData.success) {
                    displayLastQuizRankings(lastQuizData.data);
                } else {
                    displayLastQuizRankings({ rankings: [], quizTitle: null });
                }

                if (overviewData.recentActivity) {
                    displayRecentActivity(overviewData.recentActivity);
                }
                
                console.log('✅ Analytics data loaded successfully');
                
            } catch (error) {
                console.error('❌ Error loading analytics:', error);
                showError('Failed to load analytics data: ' + error.message);
            }
        }

        // Update class info in sidebar
        function updateClassInfo() {
            if (classData) {
                document.getElementById('quickStudents').textContent = classData.studentCount || 0;
                document.getElementById('quickLectures').textContent = classData.lectureCount || 0;
                document.getElementById('quickQuizzes').textContent = classData.quizCount || 0;
            }
        }

        // Update analytics stats with proper formatting
        function updateAnalyticsStats(data) {
            if (data && data.classData) {
                document.getElementById('totalStudents').textContent = data.classData.studentCount || 0;
                document.getElementById('classAverage').textContent = (parseFloat(data.classData.averageScore) || 0).toFixed(2) + '%';
                document.getElementById('totalQuizzes').textContent = data.classData.quizCount || 0;
                
                const totalAttempts = analyticsData && analyticsData.totalQuizAttempts 
                    ? analyticsData.totalQuizAttempts 
                    : (data.recentActivity ? data.recentActivity.length : 0);
                document.getElementById('totalAttempts').textContent = totalAttempts;
            }
        }

        // Display class rankings with points-based system
        function displayClassRankings(rankings) {
            const container = document.getElementById('classRankingsContainer');
            
            if (!rankings || rankings.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No ranking data available yet.</p>';
                return;
            }

            const rankingsHTML = rankings.map((student, index) => {
                const rankClass = index < 3 ? `rank-${index + 1}` : 'rank-other';
                const itemClass = index < 3 ? 'ranking-item top-3' : 'ranking-item';
                
                return `
                    <div class="${itemClass}">
                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                            <span class="rank-badge ${rankClass}">${student.rank}</span>
                            <div class="student-rank-info">
                                <div class="student-rank-name">${student.studentName}</div>
                                <div class="student-rank-meta">
                                    ${student.totalQuizzes} quizzes • ${formatPercentage(student.participationRate)}% participation
                                </div>
                            </div>
                        </div>
                        <div class="student-rank-score">
                            <div class="student-score-main">${(parseFloat(student.averageScore) || 0).toFixed(2)}% (${student.finalPoints}pts)</div>
                            <div class="student-score-sub">Score + Time + Participation</div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = rankingsHTML;
        }

        // Display last quiz rankings
        function displayLastQuizRankings(data) {
            const container = document.getElementById('lastQuizRankingsContainer');
            
            if (!data || !data.rankings || data.rankings.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No recent quiz rankings available.</p>';
                return;
            }

            const quizHeaderHTML = data.quizTitle ? `
                <div class="quiz-header-info">
                    📝 <strong>${data.quizTitle}</strong> • ${data.rankings.length} participants
                </div>
            ` : '';

            const rankingsHTML = data.rankings.map((student, index) => {
                const rankClass = index < 3 ? `rank-${index + 1}` : 'rank-other';
                const itemClass = index < 3 ? 'ranking-item top-3' : 'ranking-item';
                
                return `
                    <div class="${itemClass}">
                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                            <span class="rank-badge ${rankClass}">${student.rank}</span>
                            <div class="student-rank-info">
                                <div class="student-rank-name">${student.studentName}</div>
                                <div class="student-rank-meta">
                                    Completed in ${student.timeTaken} • ${formatPercentage(student.timeEfficiency)}% efficiency
                                </div>
                            </div>
                        </div>
                        <div class="student-rank-score">
                            <div class="student-score-main">${formatPercentage(student.score)}% (${student.points}pts)</div>
                            <div class="student-score-sub">Score + Time</div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = quizHeaderHTML + rankingsHTML;
        }

        // Display recent activity with proper formatting
        function displayRecentActivity(activities) {
            const container = document.getElementById('recentActivityContainer');
            
            if (!activities || activities.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No recent activity.</p>';
                return;
            }

            const activitiesHTML = activities.map(activity => `
                <div class="activity-item">
                    <div>
                        <span style="font-weight: 500;">${activity.studentName}</span>
                        <div style="font-size: 0.8rem; color: #64748b;">${activity.submissionDate} • ${activity.timeTaken}</div>
                    </div>
                    <div style="font-weight: bold; color: #3b82f6;">${(parseFloat(activity.score) || 0).toFixed(2)}%</div>
            `).join('');

            container.innerHTML = activitiesHTML;
        }

        // Create performance trend chart
        function createPerformanceTrendChart(trendData) {
            const ctx = document.getElementById('performanceChart');
            if (!ctx) {
                console.error('❌ Performance chart canvas not found');
                return;
            }

            if (performanceChart) {
                performanceChart.destroy();
            }

            if (!trendData || trendData.length === 0) {
                console.warn('⚠️ No trend data available, creating empty chart');
                trendData = [{ quizTitle: 'No Data', score: 0, attempts: 0 }];
            }

            const labels = trendData.map((item, index) => item.quizTitle || `Quiz ${index + 1}`);
            const scores = trendData.map(item => parseFloat(item.score) || 0);

            console.log('📊 Creating performance chart with data:', { labels, scores });

            performanceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Average Score (%)',
                        data: scores,
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#3b82f6',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    const dataPoint = trendData[context.dataIndex];
                                    return [
                                        `Average Score: ${context.parsed.y.toFixed(1)}%`,
                                        `Attempts: ${dataPoint.attempts || 0}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Score (%)',
                                font: {
                                    size: 12,
                                    weight: 'bold'
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Quizzes',
                                font: {
                                    size: 12,
                                    weight: 'bold'
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });

            console.log('✅ Performance trend chart created successfully');
        }

        // Create distribution chart
        function createDistributionChart(distributionData) {
            const ctx = document.getElementById('distributionChart');
            if (!ctx) return;

            if (distributionChart) {
                distributionChart.destroy();
            }

            const data = {
                excellent: distributionData.excellent || 0,
                good: distributionData.good || 0,
                average: distributionData.average || 0,
                needsImprovement: distributionData.needsImprovement || 0
            };

            distributionChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Excellent (90%+)', 'Good (70-89%)', 'Average (50-69%)', 'Needs Improvement (<50%)'],
                    datasets: [{
                        data: [data.excellent, data.good, data.average, data.needsImprovement],
                        backgroundColor: ['#10b981', '#3b82f6', '#f59e0b', '#ef4444'],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Display detailed analytics with proper formatting
        function displayDetailedAnalytics(analytics) {
            const container = document.getElementById('detailedAnalyticsContainer');
            
            if (!analytics) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No detailed analytics available yet.</p>';
                return;
            }

            const analyticsHTML = `
                <div class="grid-3" style="margin-bottom: 1.5rem;">
                    <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                        <div style="font-size: 1.5rem; font-weight: bold; color: #3b82f6;">${analytics.totalParticipants || 0}</div>
                        <div style="color: #64748b;">Participants</div>
                    </div>
                    <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                        <div style="font-size: 1.5rem; font-weight: bold; color: #10b981;">${(parseFloat(analytics.classAverage) || 0).toFixed(2)}%</div>
                        <div style="color: #64748b;">Average Score</div>
                    </div>
                    <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                        <div style="font-size: 1.5rem; font-weight: bold; color: #f59e0b;">${analytics.totalQuizAttempts || 0}</div>
                        <div style="color: #64748b;">Total Attempts</div>
                    </div>
                </div>
                
                ${analytics.quizPerformance && analytics.quizPerformance.length > 0 ? `
                    <h4 style="margin-bottom: 1rem;">📝 Quiz Performance Breakdown</h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Quiz</th>
                                <th>Attempts</th>
                                <th>Average</th>
                                <th>Highest</th>
                                <th>Lowest</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${analytics.quizPerformance.map(quiz => `
                                <tr>
                                    <td>${quiz.quizTitle}</td>
                                    <td>${quiz.totalAttempts}</td>
                                    <td><strong>${(parseFloat(quiz.averageScore) || 0).toFixed(2)}%</strong></td>
                                    <td>${(parseFloat(quiz.highestScore) || 0).toFixed(2)}%</td>
                                    <td>${(parseFloat(quiz.lowestScore) || 0).toFixed(2)}%</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                ` : '<p style="text-align: center; color: #64748b;">No quiz performance data available.</p>'}
            `;

            container.innerHTML = analyticsHTML;
        }

        // Load quizzes function
        async function loadQuizzes() {
            console.log('📝 Loading quizzes for class:', classId);
            
            try {
                const response = await fetch(`/api/teacher/class/${classId}/quizzes`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('✅ Quizzes loaded:', data.quizzes.length);
                    displayQuizzes(data.quizzes);
                } else {
                    console.error('❌ Failed to load quizzes:', data.message);
                    showError('Failed to load quizzes: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading quizzes:', error);
                showError('Network error while loading quizzes.');
            }
        }

        // Load students function
        async function loadStudents() {
            console.log('👥 Loading students for class:', classId);
            
            try {
                const response = await fetch(`/api/classes/${classId}/students`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('✅ Students loaded:', data.students.length);
                    displayStudents(data.students);
                } else {
                    console.error('❌ Failed to load students:', data.message);
                    showError('Failed to load students: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading students:', error);
                showError('Network error while loading students.');
            }
        }

        // Display students with proper formatting
        function displayStudents(students) {
            const container = document.getElementById('studentsContainer');
            
            if (students.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>👥 No Students Enrolled</h3>
                        <p>Add students using their enrollment numbers or share a join code.</p>
                    </div>
                `;
                return;
            }

            const studentsHTML = students.map(student => `
                <div class="student-item">
                    <div class="student-info">
                        <div class="student-name">${student.studentName}</div>
                        <div class="student-meta">Enrollment: ${student.studentEnrollment} • Joined: ${new Date(student.enrolledAt).toLocaleDateString()}</div>
                    </div>
                    <div class="student-stats">
                        <div class="student-stat">
                            <div class="student-stat-value">${student.totalQuizzes}</div>
                            <div class="student-stat-label">Quizzes</div>
                        </div>
                        <div class="student-stat">
                            <div class="student-stat-value">${(parseFloat(student.averageScore) || 0).toFixed(2)}%</div>
                            <div class="student-stat-label">Average</div>
                        </div>
                    </div>
                    <div class="student-actions">
                        <a href="/class/${classId}/student-analytics/${student.studentId}" 
                           class="view-performance-btn" target="_blank">
                            📊 View Performance
                        </a>
                        <button class="btn btn-danger" onclick="removeStudent('${student.studentId}')" 
                                style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                            Remove
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = studentsHTML;
        }

        // Remove student
        async function removeStudent(studentId) {
            if (!confirm('Are you sure you want to remove this student from the class?')) {
                return;
            }

            try {
                const response = await fetch(`/api/classes/${classId}/students/${studentId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Student removed successfully!');
                    loadStudents();
                    loadAnalytics();
                } else {
                    showError('Failed to remove student: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Remove student error:', error);
                showError('Network error while removing student.');
            }
        }

        // Archive class
        async function archiveClass() {
            if (!confirm(`Are you sure you want to archive the class "${className}"? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/classes/${classId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Class archived successfully! Redirecting to dashboard...');
                    setTimeout(() => {
                        window.location.href = '/homeTeacher';
                    }, 2000);
                } else {
                    showError('Failed to archive class: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Archive class error:', error);
                showError('Network error while archiving class.');
            }
        }

        // Utility functions
        function showSuccess(message) {
            console.log('✅', message);
            
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-success" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Success!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-success');
                if (alert) alert.remove();
            }, 8000);
        }

        function showError(message) {
            console.error('❌', message);
            
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-error" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Error!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-error');
                if (alert) alert.remove();
            }, 10000);
        }

        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('open');
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                if (document.getElementById('createQuizModal').classList.contains('active')) {
                    closeCreateQuizModal();
                }
                if (document.getElementById('quizViewerModal').classList.contains('active')) {
                    closeQuizViewer();
                }
                if (document.getElementById('pendingRequestsModal').classList.contains('active')) {
                    closePendingRequestsModal();
                }
                // 🆕 NEW: Close loading overlay on escape (if there's an error)
                if (document.getElementById('loadingOverlay').classList.contains('active')) {
                    hideLoadingOverlay();
                }
            }
        });

        // Cleanup function when page unloads
        window.addEventListener('beforeunload', function() {
            if (joinCodeTimer) {
                clearInterval(joinCodeTimer);
            }
            
            // 🆕 NEW: Clean up exam session timers
            examSessionTimers.forEach((timer, quizId) => {
                clearInterval(timer);
            });
            examSessionTimers.clear();
        });
    </script>
</body>
</html>