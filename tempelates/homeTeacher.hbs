<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professor Dashboard - Quizzie</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
            min-height: calc(100vh - 200px);
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* Section Header with Right-Aligned Button */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .section-header h2 {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin: 0;
        }

        /* Create Class Button */
        .create-class-btn {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .create-class-btn:hover {
            background: #059669;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .create-class-btn .icon {
            font-size: 1rem;
        }

        /* General Button Styles */
        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-lg {
            padding: 1rem 2rem;
            font-size: 1rem;
        }

        /* CLASS CARDS */
        .classes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .class-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-left: 4px solid #3b82f6;
        }

        .class-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .class-header {
            margin-bottom: 1rem;
        }

        .class-name {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .class-subject {
            font-size: 0.9rem;
            color: #3b82f6;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .class-description {
            font-size: 0.85rem;
            color: #64748b;
            line-height: 1.4;
        }

        /* CLASS QUICK STATS */
        .class-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .class-stat {
            text-align: center;
        }

        .class-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #3b82f6;
            display: block;
        }

        .class-stat-label {
            font-size: 0.75rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* CLASS ACTIONS */
        .class-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 1rem;
        }

        .action-button {
            flex: 1;
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .action-button:hover {
            transform: translateY(-1px);
        }

        .action-button.quiz-btn {
            background: #f59e0b;
        }
        .action-button.quiz-btn:hover {
            background: #d97706;
        }

        .action-button.manage-btn {
            background: #8b5cf6;
        }
        .action-button.manage-btn:hover {
            background: #7c3aed;
        }

        /* MODAL STYLES */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #64748b;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .close-btn:hover {
            background: #f1f5f9;
        }

        /* FORM STYLES */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s ease;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-textarea {
            min-height: 80px;
            resize: vertical;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-warning {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            color: #92400e;
        }

        .alert-success {
            background: #dcfce7;
            border: 1px solid #16a34a;
            color: #15803d;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #dc2626;
            border: 1px solid #fca5a5;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .empty-state p {
            margin-bottom: 1.5rem;
        }

        /* 🆕 NEW: Footer Styles - Adapted for Dashboard */
        .footer {
            background: white;
            border-top: 1px solid #e2e8f0;
            padding: 1.5rem 0;
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.875rem;
            color: #64748b;
        }

        .footer-copyright {
            font-weight: 400;
        }

        .footer-link {
            color: #3b82f6;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s ease;
        }

        .footer-link:hover {
            color: #2563eb;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .classes-grid {
                grid-template-columns: 1fr;
            }

            .class-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .action-button {
                width: 100%;
            }

            .section-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .class-stats {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                padding: 1.5rem;
            }

            /* Mobile specific for create button */
            .create-class-btn {
                width: 100%;
                justify-content: center;
            }

            /* 🆕 NEW: Mobile footer styles */
            .footer-content {
                flex-direction: column;
                gap: 0.75rem;
                text-align: center;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .class-card {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <header class="header">
     <div class="header-content">
         <div class="logo">Quizzie</div>
         <!-- NEW: Wrap profile-section content in an <a> tag -->
         <a href="/profileTeacher" class="profile-section profile-clickable">
             <div class="profile-avatar" id="profileAvatar"></div>
             <div class="profile-info">
                 <h3>{{{userName}}}</h3>
                 <p>Professor</p>
             </div>
         </a>
         <!-- Keep logout button separate as it was -->
         <a href="/logout" class="logout-btn">Logout</a>
     </div>
 </header>

    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        {{#if classCreated}}
            <div class="alert alert-success">
                ✅ Class "{{createdClassName}}" created successfully!
            </div>
        {{/if}}

        {{#if uploadError}}
            <div class="alert alert-error">
                ❌ {{message}}
            </div>
        {{/if}}

        <!-- Class-focused Stats Section -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value" id="totalClassesCount">{{totalClasses}}</div>
                <div class="stat-label">Total Classes</div>
            </div>
            <div class="stat-card green">
                <div class="stat-value" id="totalStudentsCount">{{totalStudents}}</div>
                <div class="stat-label">Total Students</div>
            </div>
            <div class="stat-card purple">
                <div class="stat-value" id="totalLecturesCount">{{totalLectures}}</div>
                <div class="stat-label">Total Lectures</div>
            </div>
            <div class="stat-card orange">
                <div class="stat-value" id="totalQuizzesCount">{{totalQuizzes}}</div>
                <div class="stat-label">Total Quizzes</div>
            </div>
        </section>

        <!-- My Classes Section -->
        <section class="section">
            <div class="section-header">
                <h2>📚 My Classes</h2>
                <button class="create-class-btn" onclick="showCreateClassModal()">
                    <span class="icon">➕</span>
                    New Class
                </button>
            </div>
            <div id="classesContainer">
                {{#if classes}}
                    <div class="classes-grid">
                        {{#each classes}}
                            <div class="class-card">
                                <div class="class-header">
                                    <h3 class="class-name">{{this.name}}</h3>
                                    <p class="class-subject">📖 {{this.subject}}</p>
                                    {{#if this.description}}
                                        <p class="class-description">{{this.description}}</p>
                                    {{/if}}
                                </div>
                                
                                <!-- Quick Stats -->
                                <div class="class-stats">
                                    <div class="class-stat">
                                        <span class="class-stat-value">{{this.studentCount}}</span>
                                        <span class="class-stat-label">Students</span>
                                    </div>
                                    <div class="class-stat">
                                        <span class="class-stat-value">{{this.lectureCount}}</span>
                                        <span class="class-stat-label">Lectures</span>
                                    </div>
                                    <div class="class-stat">
                                        <!-- 🔧 FIX: Use toFixed helper for proper formatting -->
                                        <span class="class-stat-value">{{toFixed this.averageScore 1}}%</span>
                                        <span class="class-stat-label">Avg Score</span>
                                    </div>
                                </div>
                                
                                <!-- Class Actions -->
                                <div class="class-actions">
                                    <a href="/class/manage/{{this.id}}" class="action-button manage-btn">
                                        ⚙️ Manage Class
                                    </a>
                                    <button class="action-button quiz-btn" onclick="redirectToCreateQuiz('{{this.id}}')">
                                        🎯 Create Quiz
                                    </button>
                                </div>
                            </div>
                        {{/each}}
                    </div>
                {{else}}
                    <div class="empty-state">
                        <h3>🏫 No Classes Yet</h3>
                        <p>Create your first class to start organizing your lectures and students!</p>
                        <button class="btn btn-success" onclick="showCreateClassModal()">
                            ➕ Create Your First Class
                        </button>
                    </div>
                {{/if}}
            </div>
        </section>
    </main>

    <!-- 🆕 NEW: Footer Section -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-copyright">
                © 2025 All rights reserved by www.Quizzie.in
            </div>
            <div class="footer-links">
                <a href="/about-developers" class="footer-link">Meet Our Developers</a>
            </div>
        </div>
    </footer>

    <!-- Create Class Modal -->
    <div id="createClassModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">🏫 Create New Class</h2>
                <button class="close-btn" onclick="hideCreateClassModal()">&times;</button>
            </div>
            <form id="createClassForm">
                <div class="form-group">
                    <label class="form-label">Class Name *</label>
                    <input type="text" id="className" class="form-input" 
                           placeholder="e.g., Physics 101" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Subject *</label>
                    <input type="text" id="classSubject" class="form-input" 
                           placeholder="e.g., Physics" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea id="classDescription" class="form-textarea" 
                              placeholder="Brief description of the class (optional)"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button type="button" class="btn" style="background: #64748b;" onclick="hideCreateClassModal()">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-success" style="flex: 1;">
                        ✅ Create Class
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global variables
        const professorName = '{{{userName}}}';

        // 🆕 NEW: Helper function for formatting percentages
        function formatPercentage(value, decimals = 1) {
            const num = parseFloat(value) || 0;
            return num.toFixed(decimals);
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Enhanced Teacher dashboard initializing...');
            initializeDashboard();
            loadClasses();
        });

        // Initialize dashboard UI
        function initializeDashboard() {
            // Set dynamic greeting
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            document.getElementById('dashboardTitle').textContent = `${greeting}, Professor ${professorName}!`;
            
            // Update avatar initials
            const avatar = document.getElementById('profileAvatar');
            const initials = professorName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
        }

        // Load classes
        async function loadClasses() {
            try {
                console.log('📚 Loading classes...');
                
                const response = await fetch('/api/classes');
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ Classes loaded:', result.classes.length);
                    displayClasses(result.classes);
                    updateDashboardStats(result.classes);
                } else {
                    console.error('❌ Failed to load classes:', result.message);
                    showError('Failed to load classes: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error loading classes:', error);
                showError('Network error while loading classes.');
            }
        }

        // 🔄 UPDATED: Display classes with proper percentage formatting
        function displayClasses(classes) {
            const container = document.getElementById('classesContainer');
            
            if (classes.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>🏫 No Classes Yet</h3>
                        <p>Create your first class to start organizing your lectures and students!</p>
                        <button class="btn btn-success" onclick="showCreateClassModal()">
                            ➕ Create Your First Class
                        </button>
                    </div>
                `;
                return;
            }

            const classesHTML = classes.map(classItem => `
                <div class="class-card">
                    <div class="class-header">
                        <h3 class="class-name">${classItem.name}</h3>
                        <p class="class-subject">📖 ${classItem.subject}</p>
                        ${classItem.description ? `<p class="class-description">${classItem.description}</p>` : ''}
                    </div>
                    
                    <div class="class-stats">
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.studentCount}</span>
                            <span class="class-stat-label">Students</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.lectureCount}</span>
                            <span class="class-stat-label">Lectures</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${(parseFloat(classItem.averageScore) || 0).toFixed(2)}%</span>
                            <span class="class-stat-label">Avg Score</span>
                        </div>
                    </div>
                    
                    <div class="class-actions">
                        <a href="/class/manage/${classItem.id}" class="action-button manage-btn">
                            ⚙️ Manage Class
                        </a>
                        <button class="action-button quiz-btn" onclick="redirectToCreateQuiz('${classItem.id}')">
                            🎯 Create Quiz
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = `<div class="classes-grid">${classesHTML}</div>`;
        }

        // Update dashboard stats
        function updateDashboardStats(classes) {
            const totalClasses = classes.length;
            const totalStudents = classes.reduce((sum, cls) => sum + cls.studentCount, 0);
            const totalLectures = classes.reduce((sum, cls) => sum + cls.lectureCount, 0);
            const totalQuizzes = classes.reduce((sum, cls) => sum + cls.quizCount, 0);

            document.getElementById('totalClassesCount').textContent = totalClasses;
            document.getElementById('totalStudentsCount').textContent = totalStudents;
            document.getElementById('totalLecturesCount').textContent = totalLectures;
            document.getElementById('totalQuizzesCount').textContent = totalQuizzes;
        }

        // Modal functions
        function showCreateClassModal() {
            document.getElementById('createClassModal').classList.add('show');
            document.getElementById('className').focus();
        }

        function hideCreateClassModal() {
            document.getElementById('createClassModal').classList.remove('show');
            document.getElementById('createClassForm').reset();
        }

        // Create class form handler
        document.getElementById('createClassForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('className').value.trim(),
                subject: document.getElementById('classSubject').value.trim(),
                description: document.getElementById('classDescription').value.trim()
            };

            if (!formData.name || !formData.subject) {
                showError('Class name and subject are required.');
                return;
            }

            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            try {
                submitButton.textContent = '⏳ Creating...';
                submitButton.disabled = true;

                const response = await fetch('/api/classes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Class "${result.class.name}" created successfully!`);
                    hideCreateClassModal();
                    loadClasses(); // Refresh the classes list
                } else {
                    showError('Failed to create class: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error creating class:', error);
                showError('Network error while creating class.');
            } finally {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        // Redirect to create quiz
        function redirectToCreateQuiz(classId) {
            window.location.href = `/class/manage/${classId}?tab=quizzes`;
        }

        // Success/Error message functions
        function showSuccess(message) {
            // Remove existing alerts
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-success" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Success!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-success');
                if (alert) alert.remove();
            }, 5000);
        }

        function showError(message) {
            // Remove existing alerts
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-error" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Error!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-error');
                if (alert) alert.remove();
            }, 8000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('createClassModal');
            if (event.target === modal) {
                hideCreateClassModal();
            }
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                hideCreateClassModal();
            }
        });
    </script>
</body>
</html>